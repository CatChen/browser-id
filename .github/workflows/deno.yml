# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main', '[0-9]+-[0-9]+-*']
  workflow_call:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2
        with:
          deno-version: latest

      - run: |
          # Hack for switching from using NPM to JSR
          cat src/browserID.ts | sed "s/'versioned-storage'/'@catchen\\/versioned-storage'/g" > src/browserID.deno.ts
          mv -f src/browserID.deno.ts src/browserID.ts

      - run: deno install

      - run: |
          # Hack for validating the same dependency version in package.json and deno.json
          NPM_SEMVER=$(cat package.json | yarn --silent json 'dependencies.versioned-storage')
          JSR_SERVER=$(cat deno.json | yarn --silent json 'imports.@catchen/versioned-storage' | sed -nE 's/jsr:@catchen\/versioned-storage@(.*)/\1/p')
          if [[ "$NPM_VERSION" != "$JSR_VERSION" ]]
          then
            echo "::error::versioned-storage semver mismatch between package.json ($NPM_SEMVER) and deno.json ($JSR_SERVER)"
            exit 1
          fi

      - run: deno fmt --check

      - run: deno lint

      - run: |
          NPM_VERSION=$(cat package.json | yarn --silent json 'version')
          JSR_VERSION=$(cat deno.json | yarn --silent json 'version')
          if [[ "$NPM_VERSION" != "$JSR_VERSION" ]]
          then
            echo "::error::Version mismatch between package.json ($NPM_VERSION) and deno.json ($JSR_VERSION)"
            exit 1
          fi
